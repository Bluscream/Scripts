#!/bin/bash

# QEMU Disk Image Mounting Function
# Based on: https://www.howtogeek.com/devops/how-to-mount-a-qemu-virtual-disk-image/
# 
# Usage: mount_qemu_disk <disk_image> [mount_point] [options]
# Examples:
#   mount_qemu_disk disk.qcow2
#   mount_qemu_disk disk.raw /mnt/vm
#   mount_qemu_disk disk.vmdk /mnt/vm --readonly

# Configuration
DEFAULT_MOUNT_POINT="/mnt/qemu_disk"
TEMP_DIR="/tmp"
TEMP_FILE_PREFIX="qemu_raw_"
TEMP_MOUNT_PREFIX="qemu_mount_"
SUPPORTED_FORMATS="raw qcow2 vmdk vdi vhd vhdx"
DEFAULT_PARTITION_PREFIX="partition_"
WHOLE_DISK_PARTITION_NAME="whole_disk"
UNKNOWN_OFFSET_VALUE="unknown"
DEFAULT_WHOLE_DISK_OFFSET="0"
MOUNT_OPTIONS_READONLY="-o ro"
MOUNT_OPTIONS_DEFAULT=""
LOOP_DEVICE_PREFIX="loop"
PARTITION_DEVICE_PREFIX="p"
FDISK_SECTOR_COLUMN="2"

# Function to get all partitions in the disk image
get_all_partitions() {
    local loop_device="$1"
    local show_status="${2:-true}"  # Whether to show status messages
    local all_partitions=()
    
    # Colors for output
    local GREEN='\033[0;32m'
    local NC='\033[0m' # No Color
    
    # Function to print colored output (only if show_status is true)
    print_status() {
        if [[ "$show_status" == "true" ]]; then
            echo -e "${GREEN}[INFO]${NC} $1" >&2
        fi
    }
    
    # Scan for partitions
    partprobe "$loop_device" 2>/dev/null
    
    # Check if the disk itself has a filesystem (no partition table)
    local whole_disk_fs=$(blkid -s TYPE -o value "$loop_device" 2>/dev/null)
    if [[ -n "$whole_disk_fs" ]]; then
        print_status "Found whole disk filesystem: $whole_disk_fs"
        all_partitions+=(":$whole_disk_fs:$DEFAULT_WHOLE_DISK_OFFSET")  # Empty partition name for whole disk, offset 0
    else
        # Look for all partitions
        local partition_count=0
        for partition in "${loop_device}${PARTITION_DEVICE_PREFIX}"*; do
            if [[ -e "$partition" ]] && blkid "$partition" >/dev/null 2>&1; then
                partition_count=$((partition_count + 1))
                local part_name=$(basename "$partition")
                local part_fs=$(blkid -s TYPE -o value "$partition")
                
                # Get partition offset using fdisk
                local part_offset=""
                if command -v fdisk >/dev/null 2>&1; then
                    part_offset=$(fdisk -l "$loop_device" 2>/dev/null | grep "$part_name" | awk "{print \$$FDISK_SECTOR_COLUMN}")
                    if [[ -z "$part_offset" ]]; then
                        part_offset="$UNKNOWN_OFFSET_VALUE"
                    fi
                else
                    part_offset="$UNKNOWN_OFFSET_VALUE"
                fi
                
                print_status "Found partition $partition_count: $part_name ($part_fs) at offset $part_offset"
                all_partitions+=("$partition:$part_fs:$part_offset")
            fi
        done
        
        if [[ $partition_count -eq 0 ]]; then
            print_status "No partitions found on disk"
        fi
    fi
    
    # Return all partitions as a newline-separated list (clean output to stdout)
    printf '%s\n' "${all_partitions[@]}"
}

# Function to get disk image information without mounting
get_disk_info() {
    local disk_image="$1"
    
    # Colors for output
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local BLUE='\033[0;34m'
    local NC='\033[0m' # No Color
    
    # Function to print colored output
    print_status() {
        echo -e "${GREEN}[INFO]${NC} $1"
    }
    
    print_warning() {
        echo -e "${YELLOW}[WARNING]${NC} $1"
    }
    
    print_header() {
        echo -e "${BLUE}[HEADER]${NC} $1"
    }
    
    # Check if disk image exists
    if [[ ! -f "$disk_image" ]]; then
        print_warning "Disk image '$disk_image' not found!"
        return 1
    fi
    
    print_header "Disk Image Information: $disk_image"
    
    # Get basic file information
    local file_size=$(stat -c%s "$disk_image" 2>/dev/null || stat -f%z "$disk_image" 2>/dev/null)
    local file_size_human=$(numfmt --to=iec-i --suffix=B "$file_size" 2>/dev/null || echo "${file_size}B")
    
    print_status "File size: $file_size_human ($file_size bytes)"
    
    # Detect disk image format
    local format=$(qemu-img info "$disk_image" 2>/dev/null | grep "file format" | cut -d: -f2 | xargs)
    
    if [[ -z "$format" ]]; then
        print_warning "Could not detect format with qemu-img, trying file command..."
        format=$(file "$disk_image" | grep -oE "(${SUPPORTED_FORMATS// /|})" | head -1)
    fi
    
    print_status "Format: ${format:-unknown}"
    
    if [[ "$format" != "unknown" ]] && [[ -n "$format" ]]; then
        # Get detailed qemu-img information
        print_status "Detailed format information:"
        qemu-img info "$disk_image" 2>/dev/null | grep -E "(file format|virtual size|disk size|cluster_size|Format specific information)" || print_warning "No detailed format information available"
        
        # Create temporary loop device to get partition information
        local loop_device=""
        local temp_raw=""
        
        case "${format,,}" in
            "raw"|"")
                loop_device=$(losetup -f --show "$disk_image")
                ;;
            "qcow2"|"vmdk"|"vdi"|"vhd"|"vhdx")
                temp_raw="${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
                print_status "Converting to RAW for detailed analysis..."
                qemu-img convert -f "${format,,}" -O raw "$disk_image" "$temp_raw"
                loop_device=$(losetup -f --show "$temp_raw")
                ;;
        esac
        
        if [[ -n "$loop_device" ]]; then
            print_status "Partition information:"
            
            # Scan for partitions
            partprobe "$loop_device" 2>/dev/null
            
            # Check if the disk itself has a filesystem (no partition table)
            local whole_disk_fs=$(blkid -s TYPE -o value "$loop_device" 2>/dev/null)
            if [[ -n "$whole_disk_fs" ]]; then
                local uuid=$(blkid -s UUID -o value "$loop_device" 2>/dev/null || echo "N/A")
                local label=$(blkid -s LABEL -o value "$loop_device" 2>/dev/null || echo "N/A")
                
                print_status "  0: $WHOLE_DISK_PARTITION_NAME ($whole_disk_fs) at offset 0"
                print_status "    UUID: $uuid"
                print_status "    Label: $label"
            else
                # Look for partitions
                local partition_count=0
                for partition in "${loop_device}${PARTITION_DEVICE_PREFIX}"*; do
                    if [[ -e "$partition" ]] && blkid "$partition" >/dev/null 2>&1; then
                        partition_count=$((partition_count + 1))
                        local part_name=$(basename "$partition")
                        local part_fs=$(blkid -s TYPE -o value "$partition")
                        local part_uuid=$(blkid -s UUID -o value "$partition" 2>/dev/null || echo "N/A")
                        local part_label=$(blkid -s LABEL -o value "$partition" 2>/dev/null || echo "N/A")
                        
                        # Get partition offset using fdisk
                        local part_offset=""
                        if command -v fdisk >/dev/null 2>&1; then
                            part_offset=$(fdisk -l "$loop_device" 2>/dev/null | grep "$part_name" | awk "{print \$$FDISK_SECTOR_COLUMN}")
                            if [[ -z "$part_offset" ]]; then
                                part_offset="$UNKNOWN_OFFSET_VALUE"
                            fi
                        else
                            part_offset="$UNKNOWN_OFFSET_VALUE"
                        fi
                        
                        print_status "  $partition_count: $part_name ($part_fs) at offset $part_offset"
                        print_status "    UUID: $part_uuid"
                        print_status "    Label: $part_label"
                        
                        # Get partition size
                        if command -v fdisk >/dev/null 2>&1; then
                            local part_size=$(fdisk -l "$loop_device" 2>/dev/null | grep "$part_name" | awk '{print $5}')
                            if [[ -n "$part_size" ]]; then
                                print_status "    Size: $part_size"
                            fi
                        fi
                    fi
                done
                
                if [[ $partition_count -eq 0 ]]; then
                    print_status "  No partitions found"
                fi
            fi
            
            # Clean up
            losetup -d "$loop_device" 2>/dev/null
            if [[ -f "${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw" ]]; then
                rm -f "${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
            fi
        fi
    else
        print_warning "Unsupported or unknown format - cannot get detailed information"
    fi
}

# Cleanup function to handle all cleanup tasks
cleanup_and_exit() {
    local exit_code=${1:-1}
    local loop_device="$2"
    local temp_raw="${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
    
    # Clean up loop device if provided
    if [[ -n "$loop_device" ]]; then
        losetup -d "$loop_device" 2>/dev/null
    fi
    
    # Clean up temporary files
    if [[ -f "$temp_raw" ]]; then
        rm -f "$temp_raw"
    fi

    # Clean up any remaining mount directories
    if [[ -d "$base_mount_point" ]]; then
        rmdir "$base_mount_point" 2>/dev/null
    fi

    # Kill any running processes that match this script (except the current process)
    local script_name="$(basename "$0")"
    local my_pid="$$"
    pgrep -f "$script_name" | while read -r pid; do
        if [[ "$pid" != "$my_pid" ]]; then
            kill "$pid" 2>/dev/null
        fi
    done
    
    return "$exit_code"
}

# Function to mount QEMU disk images
mount_qemu_disk() {
    local disk_image="$1"
    local mount_point="${2:-}"
    local options="${3:-}"
    local target_partition="${4:-}"  # Optional: specific partition to mount
    local exit_after_mount="${5:-false}" # Optional: exit after mounting
    local temp_mount="${TEMP_DIR}/${TEMP_MOUNT_PREFIX}$$"
    local loop_device=""
    local mounted_partitions=()
    
    # Colors for output
    local RED='\033[0;31m'
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local BLUE='\033[0;34m'
    local NC='\033[0m' # No Color
    
    # Function to print colored output
    print_status() {
        echo -e "${GREEN}[INFO]${NC} $1"
    }
    
    print_warning() {
        echo -e "${YELLOW}[WARNING]${NC} $1"
    }
    
    print_error() {
        echo -e "${RED}[ERROR]${NC} $1"
    }
    
    print_header() {
        echo -e "${BLUE}[HEADER]${NC} $1"
    }
    
    # Check if disk image exists
    if [[ ! -f "$disk_image" ]]; then
        print_error "Disk image '$disk_image' not found!"
        return 1
    fi
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        return 1
    fi
    
    # Generate base mount point from image filename
    local image_basename=$(basename "$disk_image")
    local image_name_without_ext="${image_basename%.*}"
    local base_mount_point="/mnt/images/$image_name_without_ext"
    
    if [[ -n "$target_partition" ]]; then
        print_header "Mounting Specific Partition: $target_partition from $disk_image"
    else
        print_header "Mounting QEMU Disk Image: $disk_image"
    fi
    
    # Create base mount point if it doesn't exist
    if [[ ! -d "$base_mount_point" ]]; then
        print_status "Creating base mount point: $base_mount_point"
        mkdir -p "$base_mount_point"
    fi
    
    # Detect disk image format
    local format=$(qemu-img info "$disk_image" 2>/dev/null | grep "file format" | cut -d: -f2 | xargs)
    
    if [[ -z "$format" ]]; then
        print_warning "Could not detect format with qemu-img, trying file command..."
        format=$(file "$disk_image" | grep -oE "(${SUPPORTED_FORMATS// /|})" | head -1)
    fi
    
    print_status "Detected format: ${format:-unknown}"
    
    # Handle different formats
    case "${format,,}" in
        "raw"|"")
            print_status "Processing RAW disk image..."
            loop_device=$(losetup -f --show "$disk_image")
            ;;
        "qcow2")
            print_status "Processing QCOW2 disk image..."
            # Convert qcow2 to raw temporarily
            local temp_raw="${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
            print_status "Converting QCOW2 to RAW format..."
            qemu-img convert -f qcow2 -O raw "$disk_image" "$temp_raw"
            loop_device=$(losetup -f --show "$temp_raw")
            ;;
        "vmdk")
            print_status "Processing VMDK disk image..."
            # Convert vmdk to raw temporarily
            local temp_raw="${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
            print_status "Converting VMDK to RAW format..."
            qemu-img convert -f vmdk -O raw "$disk_image" "$temp_raw"
            loop_device=$(losetup -f --show "$temp_raw")
            ;;
        "vdi")
            print_status "Processing VDI disk image..."
            # Convert vdi to raw temporarily
            local temp_raw="${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
            print_status "Converting VDI to RAW format..."
            qemu-img convert -f vdi -O raw "$disk_image" "$temp_raw"
            loop_device=$(losetup -f --show "$temp_raw")
            ;;
        "vhd"|"vhdx")
            print_status "Processing VHD/VHDX disk image..."
            # Convert vhd/vhdx to raw temporarily
            local temp_raw="${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
            print_status "Converting VHD/VHDX to RAW format..."
            qemu-img convert -f vhd -O raw "$disk_image" "$temp_raw"
            loop_device=$(losetup -f --show "$temp_raw")
            ;;
        *)
            print_error "Unsupported format: $format"
            cleanup_and_exit 1
            ;;
    esac
    
    if [[ -z "$loop_device" ]]; then
        print_error "Failed to create loop device"
        cleanup_and_exit 1
    fi
    
    print_status "Created loop device: $loop_device"
    
    # Get all partitions in the disk image
    local all_partitions=($(get_all_partitions "$loop_device" "false")) # Pass "false" to suppress status messages
    local partition_count=${#all_partitions[@]}
    
    if [[ $partition_count -eq 0 ]]; then
        print_error "No filesystem found on disk or partitions"
        cleanup_and_exit 1 "$loop_device"
    fi
    
    # If specific partition is requested, filter partitions
    if [[ -n "$target_partition" ]]; then
        local target_partition_info=""
        local target_partition_name=""
        
        for partition_info in "${all_partitions[@]}"; do
            local partition_path=$(echo "$partition_info" | cut -d: -f1)
            local part_fs=$(echo "$partition_info" | cut -d: -f2)
            local part_offset=$(echo "$partition_info" | cut -d: -f3)
            
            # Check if this is the target partition
            if [[ -z "$partition_path" && "$target_partition" == "0" ]]; then
                # Whole disk filesystem
                target_partition_info="$partition_info"
                target_partition_name="$WHOLE_DISK_PARTITION_NAME"
                break
            elif [[ -n "$partition_path" ]]; then
                local part_name=$(basename "$partition_path")
                local part_number=$(echo "$part_name" | sed "s/.*${PARTITION_DEVICE_PREFIX}//")
                local partition_label=$(blkid -s LABEL -o value "$partition_path" 2>/dev/null || echo "")
                
                # Check if target matches partition number, device name, or label
                if [[ "$target_partition" == "$part_number" ]] || \
                   [[ "$target_partition" == "$part_name" ]] || \
                   [[ "$target_partition" == "$partition_label" ]]; then
                    target_partition_info="$partition_info"
                    target_partition_name="$part_name"
                    break
                fi
            fi
        done
        
        if [[ -z "$target_partition_info" ]]; then
            print_error "Partition '$target_partition' not found"
            print_status "Available partitions:"
            for i in "${!all_partitions[@]}"; do
                local partition_info="${all_partitions[$i]}"
                local partition_path=$(echo "$partition_info" | cut -d: -f1)
                local part_fs=$(echo "$partition_info" | cut -d: -f2)
                
                if [[ -z "$partition_path" ]]; then
                    print_status "  0: $WHOLE_DISK_PARTITION_NAME ($part_fs)"
                else
                    local part_name=$(basename "$partition_path")
                    local part_number=$(echo "$part_name" | sed "s/.*${PARTITION_DEVICE_PREFIX}//")
                    local partition_label=$(blkid -s LABEL -o value "$partition_path" 2>/dev/null || echo "")
                    if [[ -n "$partition_label" ]]; then
                        print_status "  $part_number: $part_name ($part_fs) [Label: $partition_label]"
                    else
                        print_status "  $part_number: $part_name ($part_fs)"
                    fi
                fi
            done
            cleanup_and_exit 1 "$loop_device"
        fi
        
        # Replace all_partitions with just the target partition
        all_partitions=("$target_partition_info")
        partition_count=1
        print_status "Found target partition: $target_partition_name"
    else
        print_status "Found $partition_count partition(s) to mount"
    fi
    
    # Mount each partition
    local mount_options="$MOUNT_OPTIONS_DEFAULT"
    if [[ "$options" == *"--readonly"* ]] || [[ "$options" == *"-r"* ]]; then
        mount_options="$MOUNT_OPTIONS_READONLY"
    fi
    
    local successful_mounts=0
    
    for i in "${!all_partitions[@]}"; do
        local partition_info="${all_partitions[$i]}"
        local partition_path=$(echo "$partition_info" | cut -d: -f1)
        local filesystem_type=$(echo "$partition_info" | cut -d: -f2)
        local partition_offset=$(echo "$partition_info" | cut -d: -f3)
        
        # Determine mount point for this partition using new folder structure
        local partition_mount_point
        if [[ -z "$partition_path" ]]; then
            # Whole disk filesystem
            partition_mount_point="$base_mount_point/$WHOLE_DISK_PARTITION_NAME"
            local partition_name="$WHOLE_DISK_PARTITION_NAME"
        else
            # Partition filesystem - try to get label or use device name
            local part_name=$(basename "$partition_path")
            local partition_label=$(blkid -s LABEL -o value "$partition_path" 2>/dev/null || echo "")
            local partition_uuid=$(blkid -s UUID -o value "$partition_path" 2>/dev/null || echo "")
            
            # Use label if available, otherwise use device name
            if [[ -n "$partition_label" ]]; then
                # Clean the label for use as directory name (remove special chars, spaces)
                local clean_label=$(echo "$partition_label" | sed 's/[^a-zA-Z0-9._-]//g' | tr '[:upper:]' '[:lower:]')
                if [[ -n "$clean_label" ]]; then
                    partition_mount_point="$base_mount_point/$clean_label"
                    local partition_name="$partition_label"
                else
                    partition_mount_point="$base_mount_point/$part_name"
                    local partition_name="$part_name"
                fi
            else
                partition_mount_point="$base_mount_point/$part_name"
                local partition_name="$part_name"
            fi
        fi
        
        # Create mount point for this partition
        if [[ ! -d "$partition_mount_point" ]]; then
            mkdir -p "$partition_mount_point"
        fi
        
        # Determine mount target
        local mount_target="${partition_path:-$loop_device}"
        
        if [[ -n "$target_partition" ]]; then
            print_status "Mounting $mount_target ($filesystem_type) at offset $partition_offset to $partition_mount_point"
        else
            print_status "Attempting to mount partition $((i + 1)): $mount_target ($filesystem_type) at offset $partition_offset to $partition_mount_point"
        fi
        
        if mount $mount_options "$mount_target" "$partition_mount_point" 2>/dev/null; then
            print_status "✓ Successfully mounted $partition_name to: $partition_mount_point"
            mounted_partitions+=("$partition_mount_point")
            successful_mounts=$((successful_mounts + 1))
            
            # Show mounted filesystem info
            df -h "$partition_mount_point" | tail -1
        else
            print_warning "✗ Failed to mount $partition_name ($filesystem_type) - skipping"
        fi
    done
    
    if [[ $successful_mounts -eq 0 ]]; then
        print_error "No partitions could be mounted successfully"
        cleanup_and_exit 1 "$loop_device"
    fi
    
    if [[ -n "$target_partition" ]]; then
        print_status "Partition mounted successfully!"
    else
        print_status "Successfully mounted $successful_mounts out of $partition_count partition(s)"
    fi
    
    # Create symlink to the image file next to the mount folder
    local image_symlink="/mnt/images/$image_name_without_ext.img"
    if [[ ! -L "$image_symlink" ]]; then
        print_status "Creating symlink to image file: $image_symlink -> $disk_image"
        ln -sf "$disk_image" "$image_symlink"
    fi
    
    # Create cleanup function
    cleanup() {
        print_status "Unmounting and cleaning up..."
        
        # Unmount all mounted partitions
        for mount_point in "${mounted_partitions[@]}"; do
            umount "$mount_point" 2>/dev/null
        done
        
        # Clean up loop device
        losetup -d "$loop_device" 2>/dev/null
        
        # Clean up temporary files
        if [[ -f "${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw" ]]; then
            rm -f "${TEMP_DIR}/${TEMP_FILE_PREFIX}$$.raw"
        fi
        
        # Remove symlink to image file
        if [[ -L "$image_symlink" ]]; then
            print_status "Removing symlink: $image_symlink"
            rm -f "$image_symlink"
        fi
        
        print_status "Cleanup completed"
    }
    
    # Set trap for cleanup on script exit
    trap cleanup EXIT INT TERM
    
    print_status "Disk image mounted successfully!"
    print_status "Mounted partitions:"
    for mount_point in "${mounted_partitions[@]}"; do
        print_status "  - $mount_point"
    done
    # Exit immediately if --exit flag was specified
    if [[ "$exit_after_mount" == "true" ]]; then
        print_status "Exiting immediately after successful mount (no cleanup)."
        print_status "To unmount later, run: $0 unmount --target $image_name_without_ext"
        exit 0
    fi
    print_status "To unmount, run: umount <mount_point>"
    print_status "Or simply exit this script (cleanup will happen automatically)"
    
    
    # Keep the mount active by waiting for user input
    echo
    print_header "Press Enter to unmount and exit..."
    read -r
}

# Function to list mounted QEMU disks
list_mounted_qemu_disks() {
    echo "Mounted QEMU disk images:"
    mount | grep -E "(${LOOP_DEVICE_PREFIX}|/mnt/images)" || echo "No QEMU disks currently mounted"
}

# Function to unmount a specific QEMU disk
unmount_qemu_disk() {
    local target="$1"
    local mount_base=""
    
    # Determine the mount base directory
    if [[ -f "$target" ]]; then
        # If it's a file path, extract the name without extension
        local image_basename=$(basename "$target")
        local image_name_without_ext="${image_basename%.*}"
        mount_base="/mnt/images/$image_name_without_ext"
    elif [[ "$target" == *"/"* ]]; then
        # If it's a full path, use it directly
        mount_base="$target"
    else
        # If it's just a name, assume it's in /mnt/images
        mount_base="/mnt/images/$target"
    fi
    
    # Check if the mount base exists
    if [[ ! -d "$mount_base" ]]; then
        echo "Error: Mount directory '$mount_base' not found"
        return 1
    fi
    
    echo "Unmounting disk from: $mount_base"
    
    # Find and unmount all partitions under this mount base
    local mounted_partitions=$(mount | grep "$mount_base" | awk '{print $3}')
    local unmounted_count=0
    
    if [[ -n "$mounted_partitions" ]]; then
        for partition in $mounted_partitions; do
            echo "  Unmounting: $partition"
            if umount "$partition" 2>/dev/null; then
                unmounted_count=$((unmounted_count + 1))
            fi
        done
    fi
    
    # Clean up symlink to image file
    local image_symlink="/mnt/images/$(basename "$mount_base").img"
    if [[ -L "$image_symlink" ]]; then
        echo "  Removing symlink: $image_symlink"
        rm -f "$image_symlink"
    fi
    
    # Clean up empty mount directories
    if [[ -d "$mount_base" ]]; then
        local empty_dirs=$(find "$mount_base" -type d -empty 2>/dev/null | sort -r)
        if [[ -n "$empty_dirs" ]]; then
            echo "  Cleaning up empty directories..."
            echo "$empty_dirs" | xargs rmdir 2>/dev/null
        fi
        
        # Remove the base directory if it's now empty
        if [[ -d "$mount_base" ]] && [[ -z "$(ls -A "$mount_base" 2>/dev/null)" ]]; then
            echo "  Removing empty base directory: $mount_base"
            rmdir "$mount_base" 2>/dev/null
        fi
    fi
    
    if [[ $unmounted_count -gt 0 ]]; then
        echo "Successfully unmounted $unmounted_count partition(s) from $mount_base"
    else
        echo "No partitions were mounted under $mount_base"
    fi
}

# Function to unmount all QEMU disks
unmount_all_qemu_disks() {
    local mounted_points=$(mount | grep -E "(${LOOP_DEVICE_PREFIX}|/mnt/images)" | awk '{print $3}')
    
    if [[ -z "$mounted_points" ]]; then
        echo "No QEMU disks currently mounted"
    else
        # Group mount points by their base directory
        local mount_bases=$(echo "$mounted_points" | sed 's|/mnt/images/[^/]*/.*|/mnt/images/&|' | sed 's|/mnt/images/[^/]*$|/mnt/images/&|' | sort -u | grep -E "^/mnt/images/" | sed 's|/mnt/images/||' | sed 's|/$||')
        
        for base in $mount_bases; do
            unmount_qemu_disk "$base"
        done
    fi
    
    # Clean up any remaining loop devices
    losetup -D 2>/dev/null
    
    # Clean up any temporary files that might have been left behind
    local temp_files=$(find "${TEMP_DIR}" -name "${TEMP_FILE_PREFIX}*.raw" -type f 2>/dev/null)
    if [[ -n "$temp_files" ]]; then
        echo "Cleaning up temporary files..."
        echo "$temp_files" | xargs rm -f 2>/dev/null
    fi
    
    # Clean up any remaining symlinks to image files
    local image_symlinks=$(find "/mnt/images" -maxdepth 1 -name "*.img" -type l 2>/dev/null)
    if [[ -n "$image_symlinks" ]]; then
        echo "Cleaning up remaining image symlinks..."
        echo "$image_symlinks" | xargs rm -f 2>/dev/null
    fi
    
    # Clean up any remaining empty mount directories
    local empty_dirs=$(find "/mnt/images" -type d -empty 2>/dev/null)
    if [[ -n "$empty_dirs" ]]; then
        echo "Cleaning up remaining empty mount directories..."
        echo "$empty_dirs" | xargs rmdir 2>/dev/null
    fi
    
    echo "All QEMU disks unmounted and artifacts cleaned up"
}

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Parse command line arguments
    command=""
    image_path=""
    partition=""
    readonly_flag=""
    target=""
    exit_after_mount="false"
    
    # Parse all arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            "list")
                command="list"
                shift
                ;;
            "unmount"|"umount")
                command="unmount"
                shift
                ;;
            "info")
                command="info"
                shift
                ;;
            "mount")
                command="mount"
                shift
                ;;
            "help"|"-h"|"--help")
                command="help"
                shift
                ;;
            "--image"|"-i")
                image_path="$2"
                shift 2
                ;;
            "--partition"|"-p")
                partition="$2"
                shift 2
                ;;
            "--readonly"|"-r"|"--ro")
                readonly_flag="--readonly"
                shift
                ;;
            "--target"|"-t")
                target="$2"
                shift 2
                ;;
            "--exit"|"-e")
                exit_after_mount="true"
                shift
                ;;
            *)
                # If no command specified yet, treat as command
                if [[ -z "$command" ]]; then
                    command="$1"
                else
                    echo "Error: Unknown argument '$1'"
                    echo "Use '$0 help' for usage information"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Execute based on command
    case "$command" in
        "list")
            list_mounted_qemu_disks
            ;;
        "unmount"|"umount")
            if [[ -n "$target" ]]; then
                unmount_qemu_disk "$target"
            else
                unmount_all_qemu_disks
            fi
            ;;
        "info")
            if [[ -z "$image_path" ]]; then
                echo "Error: No disk image specified for info command"
                echo "Usage: $0 info --image <disk_image>"
                exit 1
            fi
            get_disk_info "$image_path"
            ;;
        "mount")
            if [[ -z "$image_path" ]]; then
                echo "Error: No disk image specified for mount command"
                echo "Usage: $0 mount --image <disk_image> [--partition <partition>] [--readonly] [--exit]"
                exit 1
            fi
            mount_qemu_disk "$image_path" "" "$readonly_flag" "$partition" "$exit_after_mount"
            ;;
        "help"|"-h"|"--help"|"")
            echo "QEMU Disk Image Mounting Tool"
            echo
            echo "Usage:"
            echo "  $0 mount --image <disk_image> [--partition <partition>] [--readonly] [--exit]"
            echo "  $0 info --image <disk_image>"
            echo "  $0 list"
            echo "  $0 unmount [--target <target>]"
            echo "  $0 help"
            echo
            echo "Arguments:"
            echo "  --image, -i <path>        Path to the disk image file"
            echo "  --partition, -p <name>    Partition to mount (number, name, or label)"
            echo "  --readonly, -r, --ro      Mount in read-only mode"
            echo "  --target, -t <target>     Target for unmount (image path, folder name, or full path)"
            echo "  --exit, -e                Exit immediately after mounting (no cleanup)"
            echo
            echo "Examples:"
            echo "  $0 mount --image disk.qcow2                                    # Mount all partitions"
            echo "  $0 mount --image disk.raw --readonly                          # Mount all partitions read-only"
            echo "  $0 mount --image disk.qcow2 --partition 1                     # Mount only partition 1"
            echo "  $0 mount --image disk.vmdk --partition loop0p1 --readonly     # Mount partition by device name"
            echo "  $0 mount --image disk.raw --partition 'Win 11 Pro' --readonly # Mount partition by label"
            echo "  $0 mount --image disk.qcow2 --exit                            # Mount and exit immediately"
            echo "  $0 info --image disk.qcow2                                    # Detailed disk information"
            echo "  $0 unmount                                                    # Unmount all disks"
            echo "  $0 unmount --target /path/to/disk.img                         # Unmount by image path"
            echo "  $0 unmount --target ubuntu-server                             # Unmount by folder name"
            echo "  $0 unmount --target /mnt/images/windows-vm                    # Unmount by full path"
            echo
            echo "Mount Point Structure:"
            echo "  All partitions are mounted under: /mnt/images/<image_name>/<partition_name>"
            echo "  Example: /mnt/images/ubuntu-server/loop0p1"
            echo "  Example: /mnt/images/windows-vm/whole_disk"
            echo
            echo "Partition targeting:"
            echo "  - Use partition number (1, 2, 3...) or device name (loop0p1, loop0p2...)"
            echo "  - Use partition label (e.g., 'Win 11 Pro', 'Windows', 'hassos-data')"
            echo "  - Use '0' to mount whole disk filesystem (no partition table)"
            echo "  - Omit --partition to mount all partitions"
            echo
            echo "Supported formats: RAW, QCOW2, VMDK, VDI, VHD, VHDX"
            echo
            echo "Note: This script must be run as root (use sudo)"
            ;;
        *)
            echo "Error: Unknown command '$command'"
            echo "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
fi